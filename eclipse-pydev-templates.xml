<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="false" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Module: Empty" enabled="false" id="org.python.pydev.editor.templates.python.module.empty" name="&lt;Empty&gt;">'''
Created on ${date}

@author: ${user}
'''
${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="and keyword" enabled="false" id="org.python.pydev.editor.templates.python.and" name="and">and ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="assert keyword" enabled="false" id="org.python.pydev.editor.templates.python.assert" name="assert">assert ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="break keyword" enabled="false" id="org.python.pydev.editor.templates.python.break" name="break">break${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Class definition (simple)" enabled="true" id="org.python.pydev.editor.templates.python.class" name="class">class ${class}:${cursor}&#13;
    """The summary line for a class docstring should fit on one line.&#13;
&#13;
    If the class has public attributes, they may be documented here&#13;
    in an ``Attributes`` section and follow the same formatting as a&#13;
    function's ``Args`` section. Alternatively, attributes may be documented&#13;
    inline with the attribute's declaration (see __init__ method below).&#13;
&#13;
    Properties created with the ``@property`` decorator should be documented&#13;
    in the property's getter method.&#13;
&#13;
    Attributes:&#13;
        attr1 (str): Description of `attr1`.&#13;
        attr2 (:obj:`int`, optional): Description of `attr2`.&#13;
&#13;
    """</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Class definition (subclass)" enabled="false" id="org.python.pydev.editor.templates.python.classo" name="classs">class ${class}(${object}):${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="encoding comment" enabled="true" id="org.python.pydev.editor.templates.python.encoding.comment" name="cod"># encoding: ${word_selection}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="encoding comment: utf-8" enabled="true" id="org.python.pydev.editor.templates.python.encoding.comment.utf8" name="codu8"># encoding: utf-8</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="continue keyword" enabled="true" id="org.python.pydev.editor.templates.python.continue" name="continue">continue${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Method definition (global)" enabled="true" id="org.python.pydev.editor.templates.python.def" name="def">def ${method}(${params}):&#13;
    """Example function with types documented in the docstring.&#13;
&#13;
    `PEP 484`_ type annotations are supported. If attribute, parameter, and&#13;
    return types are annotated according to `PEP 484`_, they do not need to be&#13;
    included in the docstring:&#13;
&#13;
    Args:&#13;
        param1 (int): The first parameter.&#13;
        param2 (str): The second parameter.&#13;
&#13;
    Returns:&#13;
        bool: The return value. True for success, False otherwise.&#13;
&#13;
    .. _PEP 484:&#13;
        https://www.python.org/dev/peps/pep-0484/&#13;
&#13;
    """&#13;
    pass${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Method definition (class)" enabled="false" id="org.python.pydev.editor.templates.python.defc" name="defc">def ${method}(self):${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Method definition (class - with parameters)" enabled="false" id="org.python.pydev.editor.templates.python.defp" name="defp">def ${method}(self, ${params}):${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="del keyword" enabled="false" id="org.python.pydev.editor.templates.python.del" name="del">del ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="elif keyword" enabled="false" id="org.python.pydev.editor.templates.python.elif" name="elif">elif${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="else keyword" enabled="false" id="org.python.pydev.editor.templates.python.else" name="else">else${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="equals and not equals" enabled="false" id="org.python.pydev.editor.templates.python.eq" name="eq">def __eq__(self, o):
    if isinstance(o, ${current_class}):
        ${pass}${cursor}

    return False

def __ne__(self, o):
	return not self == o</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="for keyword" enabled="false" id="org.python.pydev.editor.templates.python.for" name="for">for ${cursor}:</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="from keyword" enabled="false" id="org.python.pydev.editor.templates.python.from" name="from">from ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="global keyword" enabled="false" id="org.python.pydev.editor.templates.python.global" name="global">global ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="import keyword" enabled="false" id="org.python.pydev.editor.templates.python.import" name="import">import ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def __init__(self):" enabled="false" id="org.python.pydev.editor.templates.python.ini" name="ini">def __init__(self):${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="def __init__(self, ${params})" enabled="false" id="org.python.pydev.editor.templates.python.init" name="inip">def __init__(self, ${params}):${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="lambda keyword" enabled="true" id="org.python.pydev.editor.templates.python.lambda" name="lambda">lambda ${args}:${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Main function pattern." enabled="true" id="org.python.pydev.editor.templates.python.main" name="main">if __name__ == '__main__':
    ${cursor}</template><template autoinsert="false" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Module: Class" enabled="false" id="org.python.pydev.editor.templates.python.module.class" name="Module: Class">'''
Created on ${date}

@author: ${user}
'''

class ${MyClass}(${object}):
    '''
    ${classdocs}
    '''


    def __init__(self, ${params}):
        '''
        ${Constructor}
        '''
        ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="Module: Command line tool skeleton using argparse (suitable for Python 2.7+)" enabled="true" id="org.python.pydev.editor.templates.python.module.cli.argparse" name="Module: CLI (argparse)"># -*- coding: utf-8 -*-&#13;
"""Example Google style docstrings.&#13;
&#13;
This module demonstrates documentation as specified by the `Google Python&#13;
Style Guide`_. Docstrings may extend over multiple lines. Sections are created&#13;
with a section header and a colon followed by a block of indented text.&#13;
&#13;
Example:&#13;
    Examples can be given using either the ``Example`` or ``Examples``&#13;
    sections. Sections support any reStructuredText formatting, including&#13;
    literal blocks::&#13;
&#13;
        $$ python example_google.py&#13;
&#13;
Section breaks are created by resuming unindented text. Section breaks&#13;
are also implicitly created anytime a new section starts.&#13;
&#13;
Attributes:&#13;
    module_level_variable1 (int): Module level variables may be documented in&#13;
        either the ``Attributes`` section of the module docstring, or in an&#13;
        inline docstring immediately following the variable.&#13;
&#13;
        Either form is acceptable, but the two should not be mixed. Choose&#13;
        one convention to document module level variables and be consistent&#13;
        with it.&#13;
&#13;
Todo:&#13;
    * For module TODOs&#13;
    * You have to also use ``sphinx.ext.todo`` extension&#13;
&#13;
.. _Google Python Style Guide:&#13;
   http://google.github.io/styleguide/pyguide.html&#13;
&#13;
"""&#13;
import argparse&#13;
import logging&#13;
&#13;
&#13;
def parse_arguments(args):&#13;
    parser = argparse.ArgumentParser()&#13;
    return parser.parse_args(args)&#13;
 &#13;
def main(args):&#13;
    args = parse_arguments(args)&#13;
    logging.basicConfig(filename='output.log', level=logging.INFO)&#13;
    logging.info('Started')&#13;
    pass&#13;
    logging.info('Finished')    &#13;
     &#13;
if __name__ == "__main__":&#13;
    import sys&#13;
    main(sys.argv[1:])</template><template autoinsert="true" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Module: Command line tool skeleton using optparse (suitable for Python &lt; 2.6)" enabled="false" id="org.python.pydev.editor.templates.python.module.cli.optparse" name="Module: CLI (optparse)">#!/usr/bin/env python
# encoding: utf-8
'''
${module} -- ${shortdesc}

${module} is a ${description}

It defines ${classes_and_methods}

@author:     ${user_name}

@copyright:  ${year} ${organization_name}. All rights reserved.

@license:    ${license}

@contact:    ${user_email}
@deffield    updated: Updated
'''

import sys
import os

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '${isodate}'
__updated__ = '${isodate}'

DEBUG = 1
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''

    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__

    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    #program_usage = '''usage: spam two eggs''' # optional - will be autogenerated by optparse
    program_longdesc = '''''' # optional - give further explanation about what the program does
    program_license = "Copyright ${year} ${user_name} (${organization_name})                                            \
                Licensed under the Apache License 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0"

    if argv is None:
        argv = sys.argv[1:]
    try:
        # setup option parser
        parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
        parser.add_option("-i", "--in", dest="infile", help="set input path [default: %default]", metavar="FILE")
        parser.add_option("-o", "--out", dest="outfile", help="set output path [default: %default]", metavar="FILE")
        parser.add_option("-v", "--verbose", dest="verbose", action="count", help="set verbosity level [default: %default]")

        # set defaults
        parser.set_defaults(outfile="./out.txt", infile="./in.txt")

        # process options
        (opts, args) = parser.parse_args(argv)

        if opts.verbose &gt; 0:
            print("verbosity level = %d" % opts.verbose)
        if opts.infile:
            print("infile = %s" % opts.infile)
        if opts.outfile:
            print("outfile = %s" % opts.outfile)

        # MAIN BODY #

    except Exception as e:
        indent = len(program_name) * " "
        sys.stderr.write(program_name + ": " + repr(e) + "\n")
        sys.stderr.write(indent + "  for help use --help")
        return 2


if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import doctest
        doctest.testmod()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '${module}_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main())</template><template autoinsert="false" context="org.python.pydev.editor.templates.python" deleted="false" description="Module: Main" enabled="true" id="org.python.pydev.editor.templates.python.module.main" name="Module: Main"># -*- coding: utf-8 -*-
"""Example Google style docstrings.

This module demonstrates documentation as specified by the `Google Python
Style Guide`_. Docstrings may extend over multiple lines. Sections are created
with a section header and a colon followed by a block of indented text.

Example:
    Examples can be given using either the ``Example`` or ``Examples``
    sections. Sections support any reStructuredText formatting, including
    literal blocks::

        $$ python example_google.py

Section breaks are created by resuming unindented text. Section breaks
are also implicitly created anytime a new section starts.

Attributes:
    module_level_variable1 (int): Module level variables may be documented in
        either the ``Attributes`` section of the module docstring, or in an
        inline docstring immediately following the variable.

        Either form is acceptable, but the two should not be mixed. Choose
        one convention to document module level variables and be consistent
        with it.

Todo:
    * For module TODOs
    * You have to also use ``sphinx.ext.todo`` extension

.. _Google Python Style Guide:
   http://google.github.io/styleguide/pyguide.html

"""
import logging

def main():
    logging.basicConfig(filename='output.log', level=logging.INFO)
    logging.info('Started')
    pass
    logging.info('Finished')

if __name__ == '__main__':
    main()</template><template autoinsert="false" context="org.python.pydev.editor.templates.python.modules" deleted="false" description="Module: Unittest" enabled="false" id="org.python.pydev.editor.templates.python.module.unittest" name="Module: Unittest">'''
Created on ${date}

@author: ${user}
'''
import unittest


class Test(unittest.TestCase):


    def test${Name}(self):
        ${pass}${cursor}


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.test${Name}']
    unittest.main()</template><template autoinsert="false" context="org.python.pydev.editor.templates.python" deleted="false" description="Module: Unittest with setUp and tearDown" enabled="true" id="org.python.pydev.editor.templates.python.module.setup_and_teardown" name="Module: Unittest with setUp and tearDown">'''
Created on ${date}

@author: ${user}
'''
import unittest


class Test(unittest.TestCase):


    def setUp(self):
        pass


    def tearDown(self):
        pass


    def test_${name}(self):
        ${pass}${cursor}


if __name__ == "__main__":
    #import sys;sys.argv = ['', 'Test.test${Name}']
    unittest.main()</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="not keyword" enabled="false" id="org.python.pydev.editor.templates.python.not" name="not">not ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="pass keyword" enabled="false" id="org.python.pydev.editor.templates.python.pass" name="pass">pass${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="pdb" enabled="true" id="org.python.pydev.editor.templates.python.pdb" name="pd">import pdb;pdb.set_trace()</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="print (considers python 2 or 3)" enabled="false" id="org.python.pydev.editor.templates.python.print" name="print">print${space_if_py2}${lparen_if_py3}${cursor}${rparen_if_py3}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="print '\n'.join(sorted(dir(value)))" enabled="false" id="org.python.pydev.editor.templates.python.printdir" name="printdir">print${space_if_py2}${lparen_if_py3}'\n'.join(sorted(dir(${cursor})))${rparen_if_py3}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="print current traceback" enabled="false" id="org.python.pydev.editor.templates.python.printexc" name="printexc">import traceback;traceback.print_exc()${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="property creation from inner methods" enabled="false" id="org.python.pydev.editor.templates.python.property_inner" name="property_inner">def ${prop}(): #@NoSelf
    doc = """${Docstring}""" #@UnusedVariable

    def fget(self):
        return self._${prop}

    def fset(self, value):
        self._${prop} = value

    def fdel(self):
        del self._${prop}

    return locals()

${prop} = property(**${prop}())${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="pydevd.settrace()" enabled="false" id="org.python.pydev.editor.templates.python.pydevd" name="pydevd">import sys;sys.path.append(r'${pydevd_dir_location}')
import pydevd;pydevd.settrace()</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="pydevd.patch_django_autoreload()" enabled="false" id="org.python.pydev.editor.templates.python.pydevd_patch_django_auto_reload" name="pydevd_patch_django_auto_reload">import sys;sys.path.append(r'${pydevd_dir_location}')
import pydevd;pydevd.patch_django_autoreload(patch_remote_debugger=True, patch_show_console=True)</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="raise" enabled="false" id="org.python.pydev.editor.templates.python.raise" name="raise">raise ${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="raise RuntimeError('desc')" enabled="false" id="org.python.pydev.editor.templates.python.raiseruntimeerror" name="raiseruntimeerror">raise RuntimeError('${desc}')${cursor}</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="return keyword" enabled="false" id="org.python.pydev.editor.templates.python.return" name="return">return ${cursor}</template><template autoinsert="false" context="org.python.pydev.editor.templates.python" deleted="false" description="Call super(current_class, self).current_method()" enabled="false" id="org.python.pydev.editor.templates.python.super" name="super">super(${current_class}, self).${current_method}(${cursor})</template><template autoinsert="false" context="org.python.pydev.editor.templates.python" deleted="false" description="Call superclass.current_method(self)" enabled="false" id="org.python.pydev.editor.templates.python.super_raw" name="super_raw">${superclass}.${current_method}(self${cursor})</template><template autoinsert="false" context="org.python.pydev.editor.templates.python" deleted="false" description="Complete test-case module with pyunit" enabled="false" id="org.python.pydev.editor.templates.python.testCase" name="testCase">import unittest

class ${TestCase}(unittest.TestCase):

    def setUp(self):
        unittest.TestCase.setUp(self)

    def tearDown(self):
        unittest.TestCase.tearDown(self)

    def test${Met1}(self):
        ${pass}${cursor}

if __name__ == '__main__':
    unittest.main()</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="while keyword" enabled="false" id="org.python.pydev.editor.templates.python.while" name="while">while ${cursor}:</template><template autoinsert="true" context="org.python.pydev.editor.templates.python" deleted="false" description="yield keyword" enabled="false" id="org.python.pydev.editor.templates.python.yield" name="yield">yield ${cursor}</template></templates>